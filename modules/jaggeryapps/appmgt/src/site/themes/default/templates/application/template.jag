<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/constants.jag");
include("/jagg/jagg.jag");

jagg.template("application", function (inputs, outputs, jagg) {
        var runtimes = outputs.runtimes;
        var appType = outputs.appType;
        var applicationCount = outputs.applicationCount;
        var appTypeName = appType.type;
        var notAllowedEnvVariables = outputs.notAllowedEnvVariables;
        var isAppTypeBuildable = appType.buildable;
        var applicationName = outputs.applicationName;
        var subscriptionPlanBaseURL = outputs.subscriptionPlanBaseURL;
        var encodedLabels = request.getParameter("encodedLabels");
        var encodedEnvs = request.getParameter("encodedEnvs");
        var log = new Log();
        var decodedLabels = parse(decodeURIComponent(encodedLabels, "UTF-8"));
        var decodedEnvs = parse(decodeURIComponent(encodedEnvs, "UTF-8"));
        var newVersion = request.getParameter("newVersion");
        var data = null;
        var allowedRuntimeContainerSpecJson = outputs.allowedContainerSpecs;
		var maxApplications = outputs.maxAppCount;
        var defaultVersion = outputs.defaultVersion;
        var appTypeCount = outputs.appTypeCount;
        var cloudSpecificApplicationRepresentation = outputs.cloudSpecificApplicationRepresentation;
        var applications = outputs.applications;
        var versionList = request.getParameter("versionArray");
    %>

      <link rel="stylesheet" href="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('css/bootstrap-3.2.0/bootstrap.min.css'))%>">
      <link rel="stylesheet" href="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('css/font-wso2-1.0.0/css/font-wso2.css'))%>">
      <link rel="stylesheet" href="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('css/font-awesome-4.2.0/font-awesome.min.css'))%>">
      <link rel="stylesheet" href="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('css/web-fonts/Roboto.css'))%>">
      <link rel="stylesheet" href="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('css/styles.css'))%>">
      <link rel="stylesheet" href="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('css/select2-4.0.0/select2.min.css'))%>">

<%
    var conSpecs = new Array();
    for(var i = 0 ; i < allowedRuntimeContainerSpecJson.data.length ; i++ ) {
        conSpecs[i] = JSON.parse(allowedRuntimeContainerSpecJson.data[i].id);
    }
%>

 <script type="text/javascript">
    var appTypeName = "<%=appType.type%>";
    const APP_TYPE_EXTENSION = "<%=appType.extension%>";
    var applicationName = "<%=applicationName%>";
    var cloudSpecificApplicationRepresentation = "<%=cloudSpecificApplicationRepresentation%>";
    var applicationCount = <%=applicationCount%>;
    var maxApplications = <%=maxApplications%>;
    var conSpecs = <%=conSpecs%>;
    var retryCount = 0;
    var iconErrorMsg = "Invalid Image";                // used to hold the validation error message of the app icon
    var artifactErrorMsg = "Invalid Artifact";
    var contentInvalidErrorMsg = "";
    var validationFailErrorMsg = "";
    var envVariableErrorMsg = "";
    var uploadURLErrorMsg = "";
    var custom = "<%=CUSTOM%>";
    var uploadMethod = "file";
    if(appTypeName== custom){
        uploadMethod="";
    }
    var urlUploadComplete = false;
    var applicationHashId;
    var notAllowedEnvVariables = jQuery.parseJSON('<%=notAllowedEnvVariables%>');
    var newVersion = "<%=newVersion%>";
    var isNewVersion = false;
    var allowedRuntimeContainerSpecJson = jQuery.parseJSON('<%=allowedRuntimeContainerSpecJson%>');
    var containerSpecNamesJson = [];
    var versionHashIdAtFileUpload;
    var progress;
    var fileMoved = false;
    var envKeyRegex = new RegExp("<%=ENV_KEY_REGEX%>");
    var applicationList = <%=applications%>;
    var versionList = "<%=versionList%>";

    $(document).ready(function(){
            if (newVersion == "true") {
                isNewVersion = true;
            }

            //Get allowed container specification names
            for (var i = 0; i < allowedRuntimeContainerSpecJson["data"].length; i++) {
                containerSpecNamesJson.push(allowedRuntimeContainerSpecJson.data[i].conSpecName);
            }

            //Set container specifications in the select option
            if (containerSpecNamesJson.length > 0) {
                var listItems = '<option selected="selected" onClick="maxApplicationCountValidate()">' +
                    containerSpecNamesJson[0] + '</option>';

                for (var i = 1; i < containerSpecNamesJson.length; i++) {
                    listItems += '<option onClick="maxApplicationCountValidate()">' + containerSpecNamesJson[i] +
                        '</option>';
                }

                $("#container").html(listItems);
            }

            //Set select2 container
            var valueElem = $('#value')[0];
            initSelect2(null, valueElem, "");
            if (applicationCount >= maxApplications) {
                $('#outerContainer').empty();
                $('#outerContainer').html('<div class="container-fluid"><div class="row row-centered">' +
                    '<div class="col-centered col-xs-10 col-sm-7  col-md-7 col-lg-6"><div class="cloud-new-content">' +
                    '<h3>You cannot have more than ' + maxApplications + " running " + cloudSpecificApplicationRepresentation.toLowerCase() + ' versions on a free subscription. ' +
                    'Please stop an existing ' + cloudSpecificApplicationRepresentation.toLowerCase() + ' version to continue.</h3></div></div></div></div>');
                return;
            }

            $("containerSpec").select2();
            $("container").select2();
            //check if application name available
            if (applicationName != "null") {
                $("#applicationName").val(applicationName);
                $("#applicationName").prop("disabled", true);
            }
            // add existing envs
            var prevEnvs =jQuery.parseJSON('<%=decodedEnvs%>');
            if(prevEnvs){
                // add existing env variables
                for(x=0; x<prevEnvs.length; x++){
                   var envVar = prevEnvs[x];
                    drawEnvTagPane($("#env-pane"), envVar.propertyName, envVar.propertyValue);
                }
            }

            // add existing labels
            var prevLabels =jQuery.parseJSON('<%=decodedLabels%>');
            if(prevLabels){
                for(x=0; x<prevLabels.length; x++){
                    var label = prevLabels[x];
                    drawEnvTagPane($("#tags-pane"), label.labelName, label.labelValue);
                }
            }
            activateUploadButton();
            $("#url-upload-block").hide();
            $("#github-block").hide();

            $.each(<%=runtimes%>,function(key,value){
                $("#runtime").append($('<option></option>').val(value.id).html(value.runtimeName));
                $("#runtime").trigger('change');
                $("#runtime").attr('title', function () {
                    return value.description;
                });
            });

            $.each(<%=conSpecs%>,function(key,value){
                $("#containerSpec").append($('<option></option>').val(value.id).html(value.conSpecName));
                $("#containerSpec").trigger('change');
            });

            var max_fields      = 10; //maximum input boxes allowed
            var wrapper         = $(".input_fields_wrap"); //Fields wrapper
            var add_button      = $(".add_field_button"); //Add button ID

            var x = 1; //initial text box count
            $(add_button).click(function(e){ //on add input button click
                e.preventDefault();
                if(x < max_fields){ //max input box allowed
                    x++; //text box increment
                    $(wrapper).append('<div class="runtime_property"> <input type="text" class="form-control" name="key">' +
                     '<input type="text" class="form-control" name="value">' +
                     '<a href="#" class="remove_field">Remove</a>' +
                     '</div>'); //add input box
                }
            });

            $(wrapper).on("click",".remove_field", function(e){ //user click on remove text
                e.preventDefault(); $(this).parent('div').remove(); x--;
            });

            var modalBody = '<div class="container-fluid">'+
                                '<div class="row">'+
                                    '<div id="progress_table" class="col-xs-12 col-md-12 section-title">' +
                                        '<i class="fw fw-2x fw-loader2 fw-spin"></i>' +
                                    '</div>' +
                                '</div>' +
                            '</div>';


            $('#application-details').submit(function(e){

                $("#app-creation-model-footer").html("");
                $("#app-creation-model-body").html(modalBody);


                 jagg.post("../blocks/application/application.jag", {
                    action:"generateApplicationHashId",
                    applicationName:$("#applicationName").val()
                },function (result) {
                    applicationHashId = result;
                    executeAsync(drawProgressWindow());
                },function (jqXHR, textStatus, errorThrown) {
                    jagg.message({content: "Error occurred while generating " + cloudSpecificApplicationRepresentation + " key.", type: 'error', id:'view_log'});
                });

                $('#add-application').loadingButton({action:'show'});
                e.preventDefault();
                var runtimeProperties = getProperties("env-pane");
                var tags = getProperties("tags-pane");
                var formData = new FormData($(this)[0]);
                var url = $(this).attr("action");

                jagg.post("../blocks/application/application.jag", {
                    action:"getVersionHashId",
                    applicationName:$("#applicationName").val(),
                    applicationRevision:$("#applicationRevision").val()
                },function (result) {
                    result = result.replace(/\r?\n|\r/g, " ").trim();
                    if(uploadMethod === "file" && versionHashIdAtFileUpload != result){
                        // application name has  been changed after file upload
                        formData.append('oldHashId', versionHashIdAtFileUpload);
                    }
                    formData.append('runtimeProperties', JSON.stringify(runtimeProperties));
                    formData.append('action', 'createApplication');
                    formData.append('isNewVersion', isNewVersion);
                    formData.append('appTypeName', appTypeName);
                    formData.append('applicationName', $("#applicationName").val());
                    var optionRuntime = $("#runtime option:selected").val();
                    var optionSpec = $("#container option:selected").index();
                    formData.append('conSpec', conSpecs[optionSpec]);
                    formData.append('runtime', optionRuntime);
                    if(appTypeName === custom) {
                        formData.append('imageRegistryUrl', $("#imageRegistryUrl").val());
                        formData.append('imageTag', $("#imageTag").val());
                        formData.append('appCreationMethod', custom);
                    }
                    if(uploadMethod === "file"){
                        formData.append('uploadedFileName', $("#uploadedFileName").val());
                        formData.append('appCreationMethod', 'default');
                    } else if (uploadMethod === "url" ) {
                        formData.append('appCreationMethod', 'url');
                        formData.append('artifactUrl', $("#artifactUrl").val());
                        formData.append('uploadedFileName', "VERSION_HASH_ID." + APP_TYPE_EXTENSION);
                    } else if (uploadMethod === "github" ) {
                        formData.append('appCreationMethod', 'github');
                        formData.append('gitRepoUrl', $("#gitRepoUrl").val());
                        formData.append('gitRepoBranch', $("#gitRepoBranch").val());
                        if($("#projectRoot").val()){
                            formData.append('projectRoot', $("#projectRoot").val());
                        } else {
                            formData.append('projectRoot', "/");
                        }
                        formData.append('token', $("#token").val());
                        // Add github url as a tag
                        if ('<%=newVersion%>' == 'null') {
                            var property = {};
                            property["key"] = "gitRepoUrl";
                            property["value"] = $("#gitRepoUrl").val();
                            tags.push(property);
                        }
                    }
                    formData.append('tags', JSON.stringify(tags));
                    var checkedDefaultVersion = $("#default_version").is(":checked");
                    formData.append('setDefaultVersion', checkedDefaultVersion);
                    $.ajax({
                        url: url,
                        type: 'POST',
                        data: formData,
                        success: function(data) {
                            jagg.message({
                                content: "Your " + cloudSpecificApplicationRepresentation.toLowerCase() + " started successfully",
                                type: 'success',
                                timeout: 3500
                            });
                        },
                        cache: false,
                        contentType: false,
                        processData: false
                    });

                return false;

                },function (jqXHR, textStatus, errorThrown) {
                    jagg.message({content: "Error occurred while getting version hash id.", type: 'error', id:'view_log'});
                });
            });

            $('#fileupload').fileupload({
                submit: function(e, data) {
                    $('#uploadedFileName').focus();
                    data.url = "<%=jagg.getAbsoluteUrl('/site/blocks/application/application.jag') %>",
                        data.dataType = 'json',
                        data.formData = {
                            action: 'uploadExistingArchive',
                            appTypeName: appTypeName,
                            applicationName: $("#applicationName").val(),
                            applicationRevision: $("#applicationRevision").val()
                        },
                        data.complete = function(jqXHR, textStatus, errorThrown) {
                            var status = jqXHR.status;
                            if (status == 200) {
                                fileMoved = true;
                                $('#btn-artifact-upload').replaceWith("<span class=\"btn btn-primary btn-file\" " +
                                "id=\"btn-artifact-upload\"><input id=\"fileupload\" type=\"file\" name=\"fileupload\">Browse</span>");
                                if (progress == 100) getVersionHashId();
                            } else {
                                progress = 0;
                                $('#progress .progress-bar').css(
                                    'width',
                                    progress + '%'
                                );
                                jagg.message({
                                    content: jqXHR.responseText,
                                    type: 'error',
                                    id: 'view_log'
                                });
                            }
                        }
                },
                progressall: function(e, data) {
                    //First parameters is percentage, second parameter is decimal radix
                    progress = parseInt(data.loaded / data.total * 100, 10);
                    $('#progress .progress-bar').css(
                        'width',
                        progress + '%'
                    );
                    if (progress == 100) {
                        $('#btn-artifact-upload').replaceWith("<span class=\"btn btn-primary btn-file\" " +
                        "id=\"btn-artifact-upload\" disabled>Processing &nbsp <i class=\"fw fw-loader2 fw-spin\"></i></span>");
                    }
                    if (progress == 100 && fileMoved) {
                        getVersionHashId();
                    }
                },
                change: function(e, data) {
                    progress = 0;
                    activateCreateApplication();
                    $.each(data.files, function(index, file) {
                        $("#uploadedFileName").val(file.name);
                    });
                    $('#progress .progress-bar').replaceWith("<div class=\"progress-bar progress-bar-success\" style=\"width: 0%;\"></div>");
                }
            });

        function getVersionHashId() {
            jagg.post("../blocks/application/application.jag", {
                action: "getVersionHashId",
                applicationName: $("#applicationName").val(),
                applicationRevision: $("#applicationRevision").val()
            }, function(result) {
                result = result.replace(/\r?\n|\r/g, " ").trim();
                versionHashIdAtFileUpload = result;
                activateCreateApplication();
            }, function(jqXHR, textStatus, errorThrown) {
                jagg.message({
                    content: "Error occurred while getting version hash id.",
                    type: 'error',
                    id: 'view_log'
                });
            });
        }
        var polleventsID;
        function drawProgressWindow(){
            $('#app_creation_progress_modal').modal({ backdrop: 'static', keyboard: false});
            $("#app_creation_progress_modal").show();
            polleventsID = setInterval(pollEvents, 2000);
        }

        function executeAsync(func) {
            setTimeout(func, 0);
        }

        function pollEvents() {
            jagg.post("../blocks/application/application.jag", {
                action:"getApplicationCreationEvents",
                applicationName:$("#applicationName").val(),
                applicationRevision:$("#applicationRevision").val()

            },function (result) {
                var result = jQuery.parseJSON(result);
                if (result.length > 0) {
                    $("#progress_table").html("");
                }
                var table = "<table class='table' style='width:100%; color:black'>" ;
                for(var i = 0; i < result.length; i++){
                    var statusStyle;
                    var event = result[i];
                    if(event.status == "success"){
                        statusStyle = "success";
                        if (event.name === "Status") {
                                table = table + "<tr class='" + statusStyle + "'><td>Container status</td>" +
                                                "<td>"+event.description+"</td>" +
                                                "<td><i class=\"fw fw-check\"></i></td></tr>";
                        } else {
                                table = table + "<tr class='" + statusStyle + "'><td>" + event.name + "</td>" +
                                                "<td></td>" +
                                                "<td><i class=\"fw fw-check\"></i></td></tr>";
                        }
                    } else if (event.status == "failed") {
                        statusStyle = "danger";
                        if (event.name === "Status") {
                                table = table + "<tr class='" + statusStyle + "'><td>Container status</td>" +
                                                "<td>"+event.description+"</td>" +
                                                "<td><i class=\"fw fw-error\"></i></td></tr>";
                        } else {
                                table = table + "<tr class='" + statusStyle + "'><td>" + event.name + "</td>" +
                                                "<td></td>" +
                                                "<td><i class=\"fw fw-error\"></i></td></tr>";
                        }
                    } else if (event.status == "pending"){
                        if (event.name === "Status") {
                            statusStyle = "active";
                                table = table + "<tr class='" + statusStyle + "'><td>Container status</td>" +
                                                "<td>"+event.description+"</td>" +
                                                "<td><i class=\"fw fw-loader2 fw-spin\"></i></td></tr>";
                        } else {
                            statusStyle = "active";
                                table = table + "<tr class='" + statusStyle + "'><td>" + event.name + "</td>" +
                                                "<td></td>" +
                                                "<td><i class=\"fw fw-loader2 fw-spin\"></i></td></tr>";
                        }
                    }
                }

                table = table + "</table>";

                $("#app-creation-model-body").html(modalBody);
                $("#app-creation-model-footer").html("");
                if (result.length > 0) {
                    $("#progress_table").html(table);
                }
                for(var i = 0; i < result.length; i++){
                    var statusStyle;
                    var event = result[i];
                    if(event.name === "Status" && event.status == "success"){
                        setTimeout(redirectAppHome, 4250);
                        function redirectAppHome(){
                            deleteAppCreationEvents();
                            window.location.replace("home.jag?applicationKey=" + applicationHashId);
                        }
                    } else if(event.status == "failed"){
                        showAppCreationFailedNotification(event.description);
                    }
                }
            },function (jqXHR, textStatus, errorThrown) {
                showAppCreationFailedNotification(errorThrown);
            });
        }

        function deleteAppCreationEvents() {
            jagg.post("../blocks/application/application.jag", {
                action:"deleteAppCreationEvents",
                applicationName: $("#applicationName").val(),
                applicationRevision: $("#applicationRevision").val()
            }, function (result) {
                //This just return a boolean from backend
            }, function(jqXHR, textStatus, errorThrown) {
                //do not interrupt the application creation process even deletion of events fails.
            });
        }

        function showAppCreationFailedNotification(error){
            var alert = "<p>" + cloudSpecificApplicationRepresentation + " creation failed. " + error + "</p>";
            var retry_button = "<button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" onclick=\"redirectAppListing();\">Cancel</button>" +
                               "<button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\" onclick=\"retryAppCreation();\">Back to " + cloudSpecificApplicationRepresentation + " Creation</button>";
            setTimeout(showErrorPopup, 1000);
            function showErrorPopup(){
                $("#app-creation-model-body").html(alert);
                $("#app-creation-model-footer").html(retry_button);
            }
            clearInterval(polleventsID);
        }

        /*** application form validation ***/

         // Classes to be added to parent div of the validated element
        var errorFormGroupClasses = "has-error";        // if validation is failed
        var successFormGroupClasses = "has-success";    // if validation is successful
        var feedBack = "has-feedback";

        // Setting validation options
        // More info: http://jqueryvalidation.org/validate#validate-options


        var creationFormValidationOpts = {
            rules: {                                        // validation rules
                applicationName: {                          // applicationName filed
                    required: true,
                    validateContent: true,
                    validateApplicationNameChar: true
                },
                applicationRevision: {
                    required: true,
                    validationApplicationRevisionChar: true,
                    checkApplicationVersionExistence: true
                },
                icon: {                                     // app icon field
                    validateAppIcon: true
                },
                uploadedFileName: {
                    validateArtifact: true
                },
                runtime: {
                    validateRuntimeSelection: true
                },
                artifactUrl: {
                    validateArtifactURL: true
                }
            },
            onsubmit: false,    // Since we are handling on submit validation on click event of the "Create" button,
            onfocusout: function (element, event) {
                var validator = $("#application-details").validate();
                validator.element(element);
                return false;
            },                            // here we disabled the form validation on submit
            highlight: function (element, errorClass, validClass) { // this is triggered when the "element" is invalid
            },
            unhighlight: function (element, errorClass, validClass) { // this is triggered when the "element" is valid
            },
            showErrors: function (event, validator) {
                // Disable app creation button if the form is not valid
                if (this.numberOfInvalids() > 0) {
                    $("#add-application").prop("disabled", true);
                    if(Object.keys(event)[0] != "uploadedFileName"){
                        $("#btn-artifact-upload").attr("disabled", true);
                    }
                    $("#url-upload").attr("disabled", true);
                } else {
                    activateCreateApplication();
                }
                this.defaultShowErrors();
            },
            errorPlacement: function (error, element) {
                if ($(element).parent().closest('div').hasClass("input-group")) {
                    error.insertAfter($(element).closest('div'));
                } else {
                    error.insertAfter(element);
                }
            }
        };

        // Register createAppForm with above options for validation
        $("#application-details").validate(creationFormValidationOpts);

        //Initially the create button is disabled
        $("#add-application").prop("disabled", true);

        $.validator.addMethod("validateContent", validateContent, getContentInvalidErrorMsg);
        $.validator.addMethod("validateAppIcon", validateAppIcon, getIconErrorMessage);
        $.validator.addMethod("validateApplicationNameChar", validateApplicationNameChar, getValidationFailErrorMsg);
        $.validator.addMethod("validationApplicationRevisionChar", validationApplicationRevisionChar, getValidationFailErrorMsg);
        $.validator.addMethod("checkApplicationVersionExistence", checkApplicationVersionExistence, "This version is already exists for this application");
        $.validator.addMethod("validateRuntimeSelection", validateRuntimeSelection, "Please select a valid runtime");
        $.validator.addMethod("validateArtifact", validateArtifact, getArtifactErrorMessage);
        $.validator.addMethod("validateEnvironmentVariable", validateEnvironmentVariable, getEnvVariableErrorMsg);
        $.validator.addMethod("validateArtifactURL", validateArtifactURL, getUploadURLErrorMsg);

        $("#appIcon").change(function() {
             $("#icon").val($("#appIcon").val());

             // validate the app icon upon changes
             var validator = $( "#application-details" ).validate();
             validator.element( "#icon" );
         });

        // Validate Icon
        $("#icon").change(function() {
             var file = $('#icon');
             validateIconImage(file.val(), this.files[0].size);
        });

        $('.radio-inline input:radio').click(function() {

            var selection = $(this);
            if(selection.val() == 'upload-from-file'){
                $('#file-upload-block').fadeIn();
                $('#url-upload-block').hide();
                $('#github-block').hide();
                uploadMethod = "file";
            }else if(selection.val() == 'upload-from-url'){
                $('#artifactUrl').val("");
                $("#artifactUrl").prop("disabled", false);
                $("#url-upload-progress").html("");
                $('#file-upload-block').hide();
                $('#github-block').hide();
                $('#url-upload-block').fadeIn();
                uploadMethod = "url";
            }else if(selection.val() == 'github-repo-url'){
                $('#file-upload-block').hide();
                $('#url-upload-block').hide();
                $('#github-block').fadeIn();
                uploadMethod = "github";
            }else if ( selection.val() == 'deploy-sample'){
 		        $('#github-block').hide();
                $('#file-upload-block').hide();
                $('#url-upload-block').fadeIn();
                $("#artifactUrl").prop("disabled", true);
                uploadMethod = "url";
                getSampleArtifactUrl(appTypeName);
            }
        });

        function getSampleArtifactUrl(appType) {
           jagg.post("../blocks/application/application.jag", {
                    action:"getSampleArtifactUrl",
                    appType:appType
                },function (result) {
                    $('#artifactUrl').val(result);
                    $('#url-upload').click();

                },function (jqXHR, textStatus, errorThrown) {
                    jagg.message({content: "An error occurred while getting the sample artifact's URL."});
                });
        }

        function validateApplicationNameChar(value) {
            var patternNonAlphaNumExceptHyphen = /[^a-zA-Z\d\-\_ ]/g;
            var isPatternMatch = patternNonAlphaNumExceptHyphen.test(value);
            validationFailErrorMsg = cloudSpecificApplicationRepresentation + " name has invalid characters. Valid characters are [a-z, A-Z, 0-9, _, -]";

            return !isPatternMatch;
        }

        function validationApplicationRevisionChar(value) {
            var patternNonAlphaNum = /[^a-zA-Z\d\-\_.]/g;
            var isPatternMatch = patternNonAlphaNum.test(value);
            validationFailErrorMsg = "Invalid version - Valid characters are [a-z, A-Z, 0-9, _, ., -]";
            return !isPatternMatch;
        }

        function validateRuntimeSelection(value){
            return (value > 0 ) ? true : false;
        }

        function validateContent(value, element) {
            var isValueValid = true;
            var valueLength = (value).length;
            if (valueLength == 0) {
                contentInvalidErrorMsg = "Empty values are not allowed for " + $(element).attr("name");
                isValueValid = false;
            } else if (!isNaN(value)) {
                contentInvalidErrorMsg = "Non-alphanumeric characters are not allowed for " + $(element).attr("name");
                isValueValid = false;
            }
            return isValueValid;
        }

        function getContentInvalidErrorMsg(){
           return contentInvalidErrorMsg;
        }

        function getValidationFailErrorMsg(){
           return validationFailErrorMsg;
        }
        /** end application creation form validations */

        $('#url-upload').click(function(){
            $("#url-upload-progress").html("<i class=\"fw fw-loader2 fw-spin\"></i>");
            isUploadUrlValid()
        });

        /**
         * This method is to validate the upload url from the front end.
         * @returns {boolean}
         */
        function isUploadUrlValid() {
            jagg.post("../blocks/application/application.jag", {
                action:"isUploadUrlValid",
                url:$("#artifactUrl").val(),
                appTypeName: appTypeName,
                appTypeExtension: APP_TYPE_EXTENSION
            },function (result) {
               if(JSON.parse(result) == true){
                    $("#url-upload-progress").html("<i class=\"fw fw-check\"></i>");
                    $("#artifactUrl").prop("disabled", true);
                    urlUploadComplete = true;
                } else {
                    jagg.message({content: "Invalid URL given. Please provide a valid URL.", type: 'error', id:'url'});
                    $("#url-upload-progress").html("");
                    $("#url-upload").prop("disabled", false);
                    $("#artifactUrl").prop("disabled", false);
                }
                activateCreateApplication();
            },function (jqXHR, textStatus, errorThrown) {
                jagg.message({content: "An error occurred while checking the validity of the URL.", type: 'error', id:'url'});
            });
        }

        // radio buttons are disabled untill application name is set when creating new applications
        if (!isNewVersion) {
            $('input[name=fileUploadRadioOptions]').prop("disabled",true);
            $('input[name=fileUploadRadioOptions]').prop("title","This option is disabled, Please enter a " + cloudSpecificApplicationRepresentation + " name first");
        }
        var appNameField = $("#applicationName");
        var createNewAppForm = $("#application-details");

        appNameField.on('blur', function () {
            checkApplicationExistence(appNameField.val());
            enableRadioButtons();
        });

        createNewAppForm.on('focusout keyup blur click', function () { // fires on every keyup & blur
            activateCreateApplication();
            activateUploadButton();
        });

        $('#artifactUrl').on('focusout keyup blur click', function () { // fires on every keyup & blur
            validateArtifactURL($('#artifactUrl').val());
        });

        $('#imageRegistryUrl').on('focusout keyup blur click', function () { // fires on every keyup & blur
            activateCreateApplication();
        });

        $('#imageTag').on('focusout keyup blur click', function () { // fires on every keyup & blur
            activateCreateApplication();
        });
    });

    function activateCreateApplication() {

        //first disable the button and then enable it only if condions are satisfied
        $("#add-application").prop("disabled", true);

        if ($('#applicationName').val() && $('#applicationRevision').val() && $('#container option:selected').val() && $('#runtime').val() > 0 && checkApplicationVersionExistence($('#applicationRevision').val())) {// mandatory validations for all app types
            if(appTypeName == custom){ // validations for custom app type
                if($("#imageRegistryUrl").val() && $("#imageTag").val()) {
                    $("#add-application").prop("disabled", false);
                }
            } else {
                if($("#uploadedFileName").val() || $("#artifactUrl").val() || ($("#gitRepoUrl").val()  && $("#gitRepoBranch").val())) { // validations for non custom app types
                    if($("#uploadedFileName").val() && progress == 100){
                        if(validateArtifactType($("#uploadedFileName").val())) {
                            $("#add-application").prop("disabled", false);
                        }
                    } else if ($("#artifactUrl").val()) {
                        if(urlUploadComplete) {
                            $("#add-application").prop("disabled", false);
                        }
                    } else if($("#gitRepoUrl").val()  && $("#gitRepoBranch").val()) {
		                $("#add-application").prop("disabled", false);
                    }
                }
            }
        }
    }


    function activateUploadButton() {
        if ($('#applicationName').val() && $('#applicationRevision').val()) {
            $("#btn-artifact-upload").attr("disabled", false);
        }
        validateArtifactURL($('#artifactUrl').val());
    }

    function enableRadioButtons(){
    if ($('#applicationName').val() && $('#applicationRevision').val()) {
        $('input[name=fileUploadRadioOptions]').prop("disabled",false);
        $('input[name=fileUploadRadioOptions]').removeProp("title");

    } else {
        $('input[name=fileUploadRadioOptions]').prop("disabled",true);
        $('input[name=fileUploadRadioOptions]').prop("title","This option is disabled, Please enter a " + cloudSpecificApplicationRepresentation + " name first");

        }
    }
    function checkApplicationExistence(newName){
        for (var i = 0; i < applicationList.length; i++){
            var existingAppName = applicationList[i].applicationName.toLowerCase();
            var nameMatch = existingAppName.localeCompare(newName.toLowerCase());
            if (nameMatch === 0) {
                var applicationHash = applicationList[i].hashId;
                var providedName = $("#applicationName").val();
                $("#applicationName").val('');
                jagg.popMessage({
                    type: 'confirm',
                    modalStatus: true,
                    title: 'Error!!!',
                    content: cloudSpecificApplicationRepresentation + ' with name: ' + providedName + ' already exists. ' +
                        'Do you want to go to the existing ' + cloudSpecificApplicationRepresentation + '?',
                    okCallback: function() {
                        window.location.replace("home.jag?applicationKey=" + applicationHash);
                    }
                });
            }
        }
    }

    function checkApplicationVersionExistence(version){
        var existingVersions = versionList.split(",");
        var version = version.toLowerCase() ;
        var verionMatch;
        for (var i = 0; i < existingVersions.length; i++){
            var existingVerion = existingVersions[i].toLowerCase();
            verionMatch = existingVerion.localeCompare(version.toLowerCase());
            if(verionMatch === 0){
                break;
            }
        }
        return !(verionMatch === 0);
    }

     function clearUploadIconField() {
         document.getElementById("icon").value = "";
         document.getElementById("appIcon").value = "";
         var validator = $( "#application-details" ).validate();
         validator.element( "#icon" );
     }

    // Return whether the app icon is validated or not
    function validateAppIcon(value) {
        var file = $("#appIcon");
        if ($("#icon").val() && file.val() != "") {
            return validateIconImage(file.val(), file[0].files[0].size);
        } else {
            return true;
        }
    }

    // Return whether the artifact is validated or not
    function validateArtifact(value) {
        var file = $("#uploadedFileName");
        if (file.val() != "") {
            return validateArtifactType(file.val());
        } else {
            return true;
        }
    }

    function validateEnvironmentVariable(value){
        var keyValidation = validateEnvKey(value);
        if(value != "" && $.inArray(value.toLowerCase(), notAllowedEnvVariables) > -1){
            envVariableErrorMsg = value + " is not allowed";
            return false;
        } else if (!keyValidation.status) {
            envVariableErrorMsg = keyValidation.msg;
            return false;
        } else {
            return true;
        }
    }

    function validateArtifactURL(value){
        var pattern = "(ftp|http|https):\/\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\/|\/([\\w#!:.?+=&%@!\\-\\/]))?\." + APP_TYPE_EXTENSION;
        var regex = new RegExp(pattern, "g");
        if(value && regex.test(value)){
            if ($('#applicationName').val() && $('#applicationRevision').val()) {
                $("#url-upload").attr("disabled", false);
            }
            return true;
        } else {
            $("#url-upload").attr("disabled", true);
            uploadURLErrorMsg = "Invalid URL. The URL should be in the format : http:\/\/host-name\/file-location\/file-name." + APP_TYPE_EXTENSION;
            return false;
        }
    }

//TODO :
    function validateADockerImageRepositoryURL(value){
        var pattern = "(http|https):\/\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\/|\/([\\w#!:.?+=&%@!\\-\\/]))?";
        var regex = new RegExp(pattern, "g");
        if(value && regex.test(value)){
            if ($('#applicationName').val() && $('#applicationRevision').val()) {
                $("#url-upload").attr("disabled", false);
            }
            return true;
        } else {
            $("#url-upload").attr("disabled", true);
            uploadURLErrorMsg = "Invalid URL. The URL should be in the format : http:\/\/host-name\/username\/repo-name";
            return false;
        }
    }

    function getUploadURLErrorMsg(){
        return uploadURLErrorMsg;
    }

    function getEnvVariableErrorMsg(){
        return envVariableErrorMsg;
    }

    function validateIconImage(filename, fileSize) {

         var ext = getFileExtension(filename);
         var maxSize = 5242880;
         var isValidExtension = false;
         var isValidIconSize = false;

         // Check extension
         switch (ext.toLowerCase()) {
             case 'jpg':
             case 'jpeg':
             case 'gif':
             case 'bmp':
             case 'png':
                 isValidExtension = true;
                 break;
             default:
                 iconErrorMsg = "Invalid image selected for " + cloudSpecificApplicationRepresentation + " Icon - Select a valid image";
                 isValidExtension = false;
                 break;
         }
         // Check size
         if(!fileSize) {
            iconErrorMsg = "Image file should be non-empty";
            isValidIconSize = false;
         } else if (fileSize != undefined && fileSize > maxSize) {
            iconErrorMsg ="Image file should be less than 5MB";
            isValidIconSize = false;
         } else {
             isValidIconSize = true;
         }
         return (isValidExtension && isValidIconSize);
    }

    function validateArtifactType(filename) {
         var ext = getFileExtension(filename);
         var isValidExtension = false;

         if(ext.toLowerCase() === APP_TYPE_EXTENSION){
            isValidExtension = true;
         } else {
            artifactErrorMsg= "Invalid artifact selected for " + cloudSpecificApplicationRepresentation + " - Select a valid artifact";
            isValidExtension = false;
         }

         return (isValidExtension);
    }

    // Utility Functions Goes Here
    // extract file extension
    function getFileExtension(filename) {
        var parts = filename.split('.');
        return parts[parts.length - 1];
    }

    function getIconErrorMessage(){
        return iconErrorMsg;
    }

    function getArtifactErrorMessage(){
        return artifactErrorMsg;
    }

    function redirectAppListing() {
        window.location.replace("index.jag");
    }

    function retryAppCreation() {
        $('#add-application').loadingButton({action:'hide'});
        $("#app-creation-model-body").html(modalBody);
        $("#app-creation-model-footer").html("");
    }

    function goBack() {
        window.history.back();
    }
 </script>

    <!-- BOF App factory menu actionbar -->
        <div class="action-bar">

        <%
    if(newVersion){
        %>
            <a onclick="goBack();" class="btn-action">
                <span class="fw-stack fw-lg btn-action-ico">
                    <i class="fw fw-circle-outline fw-stack-2x"></i>
                    <i class="fw fw-left-arrow fw-stack-1x"></i>
                </span> Back to App Home
            </a>
        <%
    } else {
            if (appTypeCount == 1) {
        %>
            <a href="<%=jagg.getAbsoluteUrl("/site/pages/index.jag")%>" class="btn-action">
                <span class="fw-stack fw-lg btn-action-ico">
                    <i class="fw fw-circle-outline fw-stack-2x"></i>
                    <i class="fw fw-left-arrow fw-stack-1x"></i>
                </span> Back to Listing
            </a>
        <%  } else { %>
            <a href="<%=jagg.getAbsoluteUrl("/site/pages/select-apptype.jag")%>" class="btn-action">
                <span class="fw-stack fw-lg btn-action-ico">
                    <i class="fw fw-circle-outline fw-stack-2x"></i>
                    <i class="fw fw-left-arrow fw-stack-1x"></i>
                </span> Back to app type selection
            </a>
        <%  } %>

            <a href="<%=jagg.getAbsoluteUrl("/site/pages/index.jag")%>" class="btn-action">
                <span class="fw-stack fw-lg btn-action-ico">
                    <i class="fw fw-circle-outline fw-stack-2x"></i>
                    <i class="fa fa-mail-reply-all fa-stack-1x"></i>
                </span> Cancel
            </a>
        <%
    }
    %>
</div>
<!-- EOF App Cloud menu actionbar-->

<div class="container-fluid cloud-container" id="outerContainer">
        <div class="row">
            <div class="col-fixed-left col-fixed-1x">
                <div class="cloud-selected-app-type <%= appType.color%>" id="1">
                    <i class="fw <%= appType.icon%> fw-4x"></i>
                </div>
            </div>
            <div class="col-md-6">
                <div class="cloud-selected-app-type-name">
                    <h1><%= appType.displayName%></h1>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-5 forms">

      <form id="application-details" method="post" action='<%=jagg.getAbsoluteUrl("/site/blocks/application/application.jag")%>' enctype="multipart/form-data">
            <div class="form-group">
                <label for="application-name"><%=cloudSpecificApplicationRepresentation%> Name: *</label>
                <input id="applicationName" name="applicationName" type="text" class="form-control" placeholder="Enter <%=cloudSpecificApplicationRepresentation.toLowerCase()%> name" />
            </div>

        <% if(newVersion){ %>
            <div class="row">
                <div class="col-md-7">
                    <div class="form-group">
                        <label for="application-version"><%=cloudSpecificApplicationRepresentation%> Version: *
                            <i class="fa fa-question-circle help-tips" data-toggle="tooltip" data-placement="left" title="Valid characters for application version are [a-z, A-Z, 0-9, _, ., -]"></i>
                        </label>
                        <input id="applicationRevision" name="applicationRevision" type="text" class="form-control" placeholder="Set the new application version here"/>
                        <label>Your current default version is <%=defaultVersion%></label>
                    </div>
                </div>
                <div class="col-md-5">
                    <div class="form-group">
                        <div class="checkbox">
                          <label>
                           <input type="checkbox" name="defaultversion" id="default_version" value="deploy-sample" class="custom-checkbox"/>Make this the default version
                          </label>
                        </div>
                    </div>
                </div>
            </div>
                <% } else { %>
            <div class="form-group">
            <label for="application-version"><%=cloudSpecificApplicationRepresentation%> Version: *
                <i class="fa fa-question-circle help-tips" data-toggle="tooltip" data-placement="left" title="Valid characters for application version are [a-z, A-Z, 0-9, _, ., -]"></i>
            </label>
            <input id="applicationRevision" name="applicationRevision" type="text" class="form-control" value="1.0.0"/>
            </div>
        <% } %>
            <div class="form-group">
            <label for="application-description" >Description:
                <i class="fa fa-question-circle help-tips" data-toggle="tooltip" data-placement="left" title="Enter upto 1000 characters"></i>
            </label>
            <textarea name="applicationDescription" class="form-control" rows="3" placeholder="<%=cloudSpecificApplicationRepresentation%> description goes here. (Optional)"></textarea>
            </div>

            <!--div class="form-group">
            <label>No Of Replicas: </label>
            <select name="replicas" id="replicas" class="form-control">
                <option value="None" selected="Selected">Select replicas</option>
                <option value="1" >1</option>
            </select>
            </div-->

            <%if(appType.type != CUSTOM) { %>
            <div class="form-group">
                <label class="radio-inline">
                    <input type="radio" name="fileUploadRadioOptions" id="inlineRadio1" value="upload-from-file"
                           checked="checked" class="custom-radio"> Upload from file system
                </label>
                <label class="radio-inline">
                    <input type="radio" name="fileUploadRadioOptions" id="inlineRadio2" value="upload-from-url"
                           class="custom-radio"> Upload from URL
                </label>
		        <label class="radio-inline">
                    <input type="radio" name="fileUploadRadioOptions" id="inlineRadioSample" value="deploy-sample"
                           class="custom-radio"> Deploy sample <%=cloudSpecificApplicationRepresentation.toLowerCase()%>
                </label>
                <%  if(isAppTypeBuildable == 'false'){ %>
                    <label class="radio-inline">
                        <input type="radio" name="fileUploadRadioOptions" id="inlineRadio3" value="github-repo-url"
                               class="custom-radio"> Clone GitHub repository
                    </label>
                <% } %>
            </div>

            <div class="form-group" id="file-upload-block">
                <div>
                    <label for="application-description" >Upload a <b>.<%=appType.extension.toUpperCase()%></b> file: *</label>
                </div>
                <div class="input-group">
                    <input id="uploadedFileName" name="uploadedFileName" type="text" class="form-control" readonly>
                    <span class="input-group-btn">
                       <span class="btn btn-primary btn-file" id="btn-artifact-upload" disabled>
                           <input id="fileupload" type="file" name="fileupload">Browse
                       </span>
                    </span>
                </div>
                <div id="progress" class="progress">
                    <div class="progress-bar progress-bar-success" style="width: 0%;"></div>
                </div>
            </div>

            <div class="form-group" id="url-upload-block">
                <div>
                    <label for="application-description" >Upload a <b>.<%=appType.extension.toUpperCase()%></b> file: *</label>
                </div>
                <div class="input-group">
                    <input id="artifactUrl" name="artifactUrl" type="text" class="form-control" placeholder="Enter artifact URL" />
                    <span class="input-group-btn">
                        <a class="btn btn-primary" id="url-upload" type="button" disabled>Upload from URL
                        <span id="url-upload-progress"></span></a>
                    </span>
                </div>
            </div>

            <div class="form-group" id="github-block">
                <div class="input-group">
                     <span class="input-group-addon">URL</span>
                    <input id="gitRepoUrl" name="gitRepoUrl" type="text" class="form-control" placeholder="Enter GitHub repository URL" />
                </div>
                <br/>
                <div class="input-group">
                    <span class="input-group-addon">Branch</span>
                    <input id="gitRepoBranch" name="gitRepoBranch" type="text" class="form-control" placeholder="Enter GitHub repository branch" />
                </div>
                <br/>
                <div class="input-group">
                    <span class="input-group-addon">Project Root</span>
                    <input id="projectRoot" name="projectRoot" type="text" class="form-control" placeholder="Project root" />
                </div>
                <br/>
                <!--div class="input-group">
                    <span class="input-group-addon">Token</span>
                    <input id="token" name="token" type="text" class="form-control" placeholder="Enter Personal access token" />
                </div-->
            </div>
            <%} else {%>
             <div class="form-group" id="custom-docker-image-block">
                <div class="input-group">
                    <span class="input-group-addon">URL</span>
                    <input id="imageRegistryUrl" name="imageRegistryUrl" type="text" class="form-control" placeholder="Docker Image Repository URL eg: docker.io/testuser/testimage" />
                </div>
                </br>
                <div class="input-group">
                    <span class="input-group-addon">Tag</span>
                    <input id="imageTag" name="imageTag" type="text" class="form-control" placeholder="eg : latest" />
                </div>
            </div>

             <%}%>
            <div class="form-group">
                <label for="runtime">Runtime: *
                    <i class="fa fa-question-circle help-tips" data-toggle="tooltip" data-placement="left" title="Select an appropriate runtime to run your <%=cloudSpecificApplicationRepresentation.toLowerCase()%>"></i>
                </label>
                <select name="runtime" id="runtime" class="form-control"></select>
            </div>

			<div class="form-group">
                <label for="container">Container Specification: *</label>
                <select name="container" id="container" class="form-control" ></select>
            </div>

            <%
                if(appType.appContext == 'true') {
            %>
                <div class="form-group">
                    <label for="applicationContext"><%=cloudSpecificApplicationRepresentation%> Context: </label>
                    <input id="applicationContext" name="applicationContext" type="text" class="form-control" value="<%=appType.defaultContext%>" />
                </div>
            <%
                }
            %>
            <% if (!newVersion) { %>
                <div class="form-group">
                    <label for="application-icon">Icon:
                        <i class="fa fa-question-circle help-tips" data-toggle="tooltip" data-placement="left"
                    title="Recommended image size is 300x300 pixels and the maximum file size is 70KB"></i>
                    </label>
                    <div class="input-group">
                        <input type="text" id="icon" name="icon" class="form-control" readonly>
                        <span class="input-group-btn">
                            <span class="btn btn-primary btn-file">
                                Browse <input type="file" id="appIcon" name="appIcon"/>
                            </span>
                            <span class="btn btn-primary btn-file" onclick="clearUploadIconField()" id="clear">
                                Clear
                            </span>
                        </span>
                    </div>
                </div>
            <% } %>

            <div class="panel-group property-accordion" id="property-accordion">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" data-parent="#accordion" href="#collapseOne">
                                    Environment Variables
                                    <span class="pull-right clickable"><i class="glyphicon glyphicon-chevron-down"></i></span>
                                </a>
                            </h4>
                        </div>
                        <div id="collapseOne" class="panel-collapse collapse">
                            <div class="info-block">
                                To add database-specific environment variables, type <b>database:</b> in the Value textbox.
                            </div>
                            <div class="panel-body" id="env-pane">
                                <div class="form-inline property-seperator">
                                    <div class="form-group">
                                        <label class="sr-only" for="key">Key</label>
                                        <input type="text" class="form-control element-add-key" placeholder="Key">
                                    </div>
                                    <div class="form-group custom-env-class-for-demo">
                                        <label class="sr-only" for="value">Value</label>
                                        <select id="value" name="value" class="form-control select2 element-add-value"></select>
                                    </div>
                                    <div class="form-group">
                                        <button class="btn btn-primary btn-primary-add btn-primary-add-val" disabled>Add</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" data-parent="#accordion" href="#collapseTwo">
                                    Tags
                                    <span class="pull-right clickable"><i class="glyphicon glyphicon-chevron-down"></i></span>
                                </a>

                            </h4>
                        </div>
                        <div id="collapseTwo" class="panel-collapse collapse">
                            <div class="panel-body " id="tags-pane">
                                <div class="form-inline property-seperator">
                                    <div class="form-group">
                                        <label class="sr-only" for="key">Key</label>
                                        <input type="text" class="form-control element-add-key" placeholder="Key">
                                    </div>
                                    <div class="form-group custom-env-class-for-demo">
                                        <label class="sr-only" for="value">Value</label>
                                        <input type="text" class="form-control element-add-value" placeholder="Value">
                                    </div>
                                    <div class="form-group">
                                        <button class="btn btn-primary btn-primary-add btn-primary-add-val" disabled>Add</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--div class="panel panel-default">
                        <div class="panel-heading">
                            <h4 class="panel-title">
                                <a data-toggle="collapse" data-parent="#accordion" href="#collapseThree">
                                    Application Context
                                    <span class="pull-right clickable"><i class="glyphicon glyphicon-chevron-down"></i></span>
                                </a>
                            </h4>
                        </div>
                        <div id="collapseThree" class="panel-collapse collapse">
                            <div class="panel-body " id="context-pane">
                                <div class="form-inline property-seperator">
                                    <div class="form-group">
                                        <label class="sr-only" for="name">Name</label>
                                        <input id="name" type="text" class="form-control" placeholder="Name">
                                    </div>
                                    <div class="form-group custom-context-class-for-demo">
                                        <label class="sr-only" for="context">Context</label>
                                        <input id="context" type="text" class="form-control" placeholder="Context">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div-->
            </div>
            <div class="form-group">
                <button class="cu-btn cu-btn-sm cu-btn-blue cu-btn-position" id="add-application">
                    <span class="fw-stack fw-lg btn-action-ico">
                        <i class="fw fw-circle-outline fw-stack-2x"></i>
                        <i class="fw fw-add fw-stack-1x"></i>
                    </span>
                        Create
                </button>
            </div>
        </form>
        </div>
        </div>
      </div><!-- /.container -->

      <script>
      function maxApplicationCountValidate() {
         if (applicationCount < maxApplications ) {
             $("#add-application").prop("disabled", false);
         } else {
             $("#add-application").prop("disabled", true);
         }
      }
      </script>

      <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/vendor/jquery.ui.widget.js'))%>"></script>
      <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/jquery.fileupload.js'))%>"></script>
      <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/jquery.iframe-transport.js'))%>"></script>
      <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/jQueryValidationPlugin-1.14.0/jquery.validate.min.js'))%>"></script>
      <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/jQueryValidationPlugin-1.14.0/additional-methods.min.js'))%>"></script>
    <!-- --------------------------------------- Overlay ----------------------------------------- -->
    <div class="modal fade build-logs-modal" id="app_creation_progress_modal">
        <div class="modal-dialog modal-dialog-margin-top-md ">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title" id="modal-title"><%=cloudSpecificApplicationRepresentation%> Creation Progress</h4>
                </div>
                <div class="modal-body" id="app-creation-model-body">
                </div>
                <div class="modal-body" id="app-creation-model-footer"></div>
            </div><!-- /.modal-content -->
        </div>
     </div><!-- /.modal -->

      <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/custom/custom.js'))%>"></script>
      <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('templates/application/js/application.js'))%>"></script>
      <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/select2-4.0.0/select2.min.js'))%>"></script>
      <script src="<%=jagg.getAbsoluteUrl(jagg.getThemeFile('js/common.js'))%>"></script>

    <%
}); %>
