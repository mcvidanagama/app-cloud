<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");
var log = new Log();
var ApplicationManager = Packages.org.wso2.appcloud.core.ApplicationManager;
/*
-----------------------------------------------------------------
    Sample JSON message we need to return

 {
     "data": {
         "restEndpoints" : [{"name" : apiName, "url" : apiUrl}],
         "soapEndpoints": [{"name" : proxyName, "wsdl" : wsdlUrl}],
         "webEndpoints" : [{"context" : context, "url" : webUrl}],
         "swaggerEndpoints" : [{"context" : context, "url" : swaggerUrl}]
     }
 }
-----------------------------------------------------------------
*/


// endpointExtractor interface
var EndpointsExtractor = {
    getEndpoints: function (deploymentUrl, versionId) {}
};

// define classes
var WarEndpointsExtractor = function () {};
var PHPEndpointsExtractor = function () {};
var MSSEndpointsExtractor = function () {};
var ESBEndpointsExtractor = function () {};
var JaggeryEndpointsExtractor = function () {};
var DSSEndpointsExtractor = function () {};

// extend the EndpointExtractor interface
WarEndpointsExtractor.prototype = Object.create(EndpointsExtractor);
PHPEndpointsExtractor.prototype = Object.create(EndpointsExtractor);
MSSEndpointsExtractor.prototype = Object.create(EndpointsExtractor);
ESBEndpointsExtractor.prototype = Object.create(EndpointsExtractor);
JaggeryEndpointsExtractor.prototype = Object.create(EndpointsExtractor);
DSSEndpointsExtractor.prototype = Object.create(EndpointsExtractor);

// actual implementation goes here
WarEndpointsExtractor.prototype.getEndpoints = function (deploymentUrl, versionId) {
    return getEndpointsWithApplicationContext(deploymentUrl, versionId);
};

PHPEndpointsExtractor.prototype.getEndpoints = function (deploymentUrl, versionId) {
    return getEndpointsWithApplicationContext(deploymentUrl, versionId);
};

MSSEndpointsExtractor.prototype.getEndpoints = function (deploymentUrl, versionId) {

    var swaggerUrl = deploymentUrl + "/swagger";
    var endpoints = undefined;
    try {
        // check whether accessible
        //get(swaggerUrl, {}, "json");

        var swaggerEndpoints = [];
        swaggerEndpoints.push({context : "/swagger", url: swaggerUrl});
        endpoints = createJsonResponse(null, null, null, swaggerEndpoints);
    } catch(e) {
        return undefined;
    }
    return endpoints;
};

ESBEndpointsExtractor.prototype.getEndpoints = function (deploymentUrl, versionId) {
    var containerApiUrl = deploymentUrl + "/container/endpoints";
    var endpoints = undefined;

    try {
        endpoints = get(containerApiUrl, {}, "json");

        var restEndpoints = [];
        var soapEndpoints = [];

        var data = endpoints.data;
        var proxies = data.urls.proxies;
        if (proxies != null) {
            if (Array.isArray(proxies)) {
                for (var i = 0; i < proxies.length; i++) {
                    var proxy = proxies[i];
                    var wsdl1 = deploymentUrl + "/" + (proxy.wsdl[0]).substring((proxy.wsdl[0]).indexOf('services'));
                    soapEndpoints.push({name : proxy.name, wsdl :wsdl1});
                }
            } else {
                var proxy = proxies;
                var wsdl1 = deploymentUrl + "/" + (proxy.wsdl[0]).substring((proxy.wsdl[0]).indexOf('services'));
                soapEndpoints.push({name : proxy.name, wsdl :wsdl1});
            }
        }

        var apis = data.urls.apis;
        if (apis != null) {
            if (Array.isArray(apis)) {
                for (var j = 0; j < apis.length; j++) {
                    var api = apis[j];
                    var url = deploymentUrl + api.context;
                    if (api.name != "ContainerAPI") {
                        restEndpoints.push({"name" : api.name, "url" : url});
                    }
                }
            } else {
                var api = apis;
                var url = deploymentUrl + api.context;
                if (api.name != "ContainerAPI") {
                    restEndpoints.push({"name" : api.name, "url" : url});
                }
            }
        }

        endpoints = createJsonResponse(restEndpoints, soapEndpoints, null, null);
    } catch(e) {
        return undefined;
    }

    return endpoints;
};

JaggeryEndpointsExtractor.prototype.getEndpoints = function (deploymentUrl, versionId) {
    return getEndpointsWithApplicationContext(deploymentUrl, versionId);
};

DSSEndpointsExtractor.prototype.getEndpoints = function (deploymentUrl, versionId) {
    var ws = require('ws');
    var getEndpoints = new ws.WSRequest();
    var options = new Array();
    options.useSOAP = 1.1;
    options.action = "dss:getEndpoints";
    var payload = '<dss:getEndpoints xmlns:dss="http://integration.dss.appcloud.wso2.org" />';

    var endpoints = undefined;
    try {
        getEndpoints.open(options, deploymentUrl + '/services/DataServiceContainerService', false);
        getEndpoints.send(payload);
        var result = getEndpoints.responseE4X;

        var soapEndpoints = [];
        if (result != undefined) {
            var ns = new Namespace("http://integration.dss.appcloud.wso2.org");
            var response = result.ns::["return"];
            for (var index=0; index < response.length(); index++) {
                var entry = response[index];
                soapEndpoints.push({name : entry.text(), wsdl : deploymentUrl + "/services/" + entry.text() + "?wsdl"});
            }
        }

        endpoints = createJsonResponse(null, soapEndpoints, null, null);
    } catch (e) {
        return undefined;
    }

    return endpoints;
};


var getEndpointsExtractor = function(appType) {
    if (appType == "war") {
        return new WarEndpointsExtractor();
    }

    if (appType == "php") {
        return new PHPEndpointsExtractor();
    }

    if (appType == "mss") {
        return new MSSEndpointsExtractor();
    }

    if (appType == "wso2esb") {
        return new ESBEndpointsExtractor();
    }

    if (appType == "jaggery") {
        return new JaggeryEndpointsExtractor();
    }

    if (appType == "wso2dataservice") {
        return new DSSEndpointsExtractor();
    }
};

var createJsonResponse = function (restEndpoints, soapEndpoints, webEndpoints, swaggerEndpoints) {

    if (restEndpoints != null && restEndpoints.length < 1) {
        restEndpoints = null;
    }

    if (soapEndpoints != null && soapEndpoints.length < 1) {
        soapEndpoints = null;
    }

    if (webEndpoints != null && webEndpoints.length < 1) {
        webEndpoints = null;
    }

    if (swaggerEndpoints != null && swaggerEndpoints.length < 1) {
        swaggerEndpoints = null;
    }

    // If all three arrays does not contain any data, return undefined.
    if (restEndpoints == null && soapEndpoints == null && webEndpoints == null && swaggerEndpoints == null) {
        return undefined;
    }

    var endpoints =  {
        "data": {
            "restEndpoints" : restEndpoints,
            "soapEndpoints": soapEndpoints,
            "webEndpoints" : webEndpoints,
            "swaggerEndpoints" : swaggerEndpoints
        }
    };

    return endpoints;
};

var getEndpointsWithApplicationContext = function (deploymentUrl, versionId) {
    var applicationContextList = ApplicationManager.getApplicationContexts(versionId);

    var context = "";
    if (applicationContextList != null && applicationContextList.size() > 0 && applicationContextList.get(0) != null){
        if(!applicationContextList.get(0).startsWith("/")){
            context = "/";
        }
        context += applicationContextList.get(0);
    } else {
        context = "/";
    }
    var webUrl = deploymentUrl + context;

    var webEndpoints = [];
    webEndpoints.push({context : context, url: webUrl});

    var endpoints = undefined;
    try {
        // check whether accessible
        // get(webUrl, {}, "text");

        endpoints = createJsonResponse(null, null, webEndpoints, null);
    } catch (e) {
        return undefined;
    }
    return endpoints;
};
%>